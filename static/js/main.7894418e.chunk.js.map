{"version":3,"sources":["Components/Header.jsx","Components/Todos.jsx","Components/Loader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","setHandleTypeTask","className","onClick","Todos","title","id","status","handleCompleted","Loader","App","useState","dataApi","setDataApi","handleTypeTask","filterTaskData","setFilterTaskData","useEffect","handleDataApi","a","fetch","response","json","result","todos","slice","console","log","filter","task","completed","filterTask","map","todo","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAoBeA,EAfA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACd,OACI,iCACI,sBAAKC,UAAU,gBAAf,UACI,oBAAIA,UAAU,OAAd,mCACA,qBAAIA,UAAU,UAAd,UACI,wBAAQA,UAAU,UAAUC,QAAS,kBAAMF,EAAkB,QAA7D,iBACA,wBAAQC,UAAU,UAAUC,QAAS,kBAAMF,EAAkB,aAA7D,uBACA,wBAAQC,UAAU,UAAUC,QAAS,kBAAMF,EAAkB,gBAA7D,oCCMLG,G,MAdD,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,gBAChC,OACI,sBAAKN,UAAU,YAAf,UACI,8BACI,6BAAMG,MAEV,qBAAKH,UAAU,eAAf,SACI,wBAAQA,UAAYK,EAAS,YAAc,QAC3CJ,QAAS,kBAAMK,EAAgBF,IAD/B,SACqCC,EAAQ,YAAc,yBCH5DE,EARA,WACX,OACI,qBAAKP,UAAU,SAAf,SACI,+CCsEGQ,MAnEf,WAGE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4CF,mBAAS,OAArD,mBAAOG,EAAP,KAAuBb,EAAvB,KACA,EAA4CU,mBAAS,IAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KAGAC,qBAAU,WACR,IAAMC,EAAa,uCAAG,gCAAAC,EAAA,sEACGC,MAAM,8CADT,cACdC,EADc,gBAECA,EAASC,OAFV,OAEdC,EAFc,OAGdC,EAAQD,EAAOE,MAAM,EAAG,IAC9BZ,EAAWW,GAJS,2CAAH,qDAMnBN,MACC,IAEHD,qBAAU,YACW,WAEjB,OADAS,QAAQC,IAAIb,GACJA,GACN,IAAK,WACHE,EAAkBJ,EAAQgB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,cAC9C,MACF,IAAK,cACHd,EAAkBJ,EAAQgB,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,cAC9C,MACF,QACEd,EAAkBJ,IAIxBmB,KACC,CAACnB,EAASE,IAGb,IAAMN,EAAkB,SAACF,GACvBO,EAAWD,EAAQoB,KAAI,SAAAR,GAAK,OAAIA,EAAMlB,KAAOA,EAAb,2BAAsBkB,GAAtB,IAA6BM,WAAYN,EAAMM,YAAaN,OAK9F,OAFAE,QAAQC,IAAIb,GACZY,QAAQC,IAAIZ,GAEV,sBAAKb,UAAU,MAAf,UACE,cAAC,EAAD,CAAQD,kBAAmBA,IAC3B,qBAAKC,UAAU,kBAAf,SAEIU,EACEG,EAAeiB,KAAI,SAAEC,EAAMC,GAAR,OACjB,cAAC,EAAD,CAEA7B,MAAO4B,EAAK5B,MACZE,OAAQ0B,EAAKH,UACbtB,gBAAiBA,EACjBF,GAAI2B,EAAK3B,IAJJ4B,MAQL,cAAC,EAAD,UCvDCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7894418e.chunk.js","sourcesContent":["import React from 'react'\n\n//Styles\nimport \"../Styles/Header.css\"\n\nconst Header = ({ setHandleTypeTask }) => {\n    return (\n        <header>\n            <nav className=\"nav-container\">\n                <h1 className=\"logo\">TodoList ðŸ˜Ž</h1>\n                <ul className=\"botones\">\n                    <button className=\"button1\" onClick={() => setHandleTypeTask('all')}>All</button>\n                    <button className=\"button1\" onClick={() => setHandleTypeTask('complete')}>Completed</button>\n                    <button className=\"button1\" onClick={() => setHandleTypeTask('notcomplete')}>Not Completed</button>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\n//styles\nimport '../Styles/Todos.css'\n\nconst Todos = ({ title, id, status, handleCompleted }) => {\n    return (\n        <div className=\"todo-card\">\n            <div>\n                <h4>{ title }</h4>\n            </div>\n            <div className=\"todo-actions\">\n                <button className={ status ? \"completed\" : \"reset\"}\n                onClick={() => handleCompleted(id)}>{status? \"completed\" : \"not completed\"}</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todos\n","import React from 'react'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <p>Cargando...</p>  \n        </div>\n    )\n}\n\nexport default Loader\n","import React, { useState, useEffect } from 'react'\nimport './App.css';\n\n//componentes\nimport Header from './Components/Header';\nimport Todos from './Components/Todos';\nimport Loader from './Components/Loader'\n\nfunction App() {\n\n  //hooks state\n  const [dataApi, setDataApi] = useState([]);\n  const [handleTypeTask, setHandleTypeTask] = useState('all');\n  const [filterTaskData, setFilterTaskData] = useState([]);\n\n  //hoks effect\n  useEffect(() => {\n    const handleDataApi = async () => {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/todos\");\n      const result = await response.json();\n      const todos = result.slice(0, 20);\n      setDataApi(todos);\n    }\n    handleDataApi();\n  }, []);\n  \n  useEffect(() => {\n    const filterTask = () => {\n      console.log(handleTypeTask);\n      switch (handleTypeTask) {\n        case 'complete':\n          setFilterTaskData(dataApi.filter(task => task.completed === true));\n          break;\n        case 'notcomplete' :\n          setFilterTaskData(dataApi.filter(task => task.completed !== true));\n          break;\n        default:\n          setFilterTaskData(dataApi);\n          break;\n      }\n    }\n    filterTask()\n  }, [dataApi, handleTypeTask]);\n\n  //funciones\n  const handleCompleted = (id) => {\n    setDataApi(dataApi.map(todos => todos.id === id ? {...todos, completed: !todos.completed} : todos))\n  }\n\n  console.log(handleTypeTask);\n  console.log(filterTaskData)\n  return (\n    <div className=\"App\">\n      <Header setHandleTypeTask={setHandleTypeTask} />\n      <div className=\"todos-container\">\n        {\n          dataApi ? (\n            filterTaskData.map(( todo, index ) => (\n              <Todos\n              key={index}\n              title={todo.title}\n              status={todo.completed}\n              handleCompleted={handleCompleted}\n              id={todo.id}\n              />\n            ))\n            ) : (\n              <Loader />\n            )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}